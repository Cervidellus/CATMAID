#!/bin/bash

##
# Generate a tiled scale pyramid of an image and a little overview thumbnail.
# Call it this way:
#
# tile <image-file-name> <tile-size> [<outfolder> [<thumbnail-size> [<max-zoom-level>]]]
#
# e.g.
# tile image.tif 256 /outpath/ 192 4
# tile image.tif 256 /outpath/ 4
# tile image.tif 256 /outpath/
# tile image.tif 256
#
# If <max-zoom-level> is ommitted, a default number of zoom levels is picked,
# which is as many as it takes until the scaled image height fits on a single
# tile.
#
# If the width/height of the picture is an odd number after every division,
# then zoom levels could get shifted a bit?
##

usage="Usage: ${0} <image-file-name> <tile-size> [<outfolder> [<thumbnail-size> [<max-zoom-level>]]]"

if [ $# -le 1  ]
then
	echo $usage
	exit 0
elif ! [[ $2 =~ ^[0-9]+$ ]]
then
	echo $usage
	exit 0
fi

image="$(realpath $1)"
tilesize=${2}
image_folder="$( dirname $image )"
outfolder="${3:-$image_folder/}"
thumbsize="${4:-192}"

mkdir -p "${outfolder}"
cd "${outfolder}" || exit

startwidth=$(identify -format "%w" "$image")
startheight=$(identify -format "%h" "$image")

s=0
default_max_zoom=$(echo "l($((${startwidth} / ${tilesize})))/l(2)+2" | bc -l | sed -e 's/\..*//')
max_zoom=${5:-$default_max_zoom}
echo "Max zoom level: ${max_zoom} (default: ${default_max_zoom})"

convert +compress "${image}" "s_${s}.ppm" || exit

width="$startwidth"
height="$startheight"

while [ $s -lt $max_zoom ]
do

	extentwidth=$width
	extentheight=$height

	collumns=$((${width}/${tilesize}))
	if [[ $width > $(($collumns*${tilesize})) ]]
	then
		collumns=$(($collumns+1))
		extentwidth=$(($collumns*$tilesize))
	fi
	rows=$((${height}/${tilesize}))
	if [[ $height > $(($rows*${tilesize})) ]]
	then
		rows=$(($rows+1))
		extentheight=$(($rows*$tilesize))
	fi

	echo "${width} => ${collumns}" >&2
	echo "${height} => ${rows}" >&2

	# skip resizing for zoomlevel 0
	if [[ "${s}" -ne 0 ]]
	then
		convert -resize ${width}x${height} "s_$((${s}-1)).ppm" "s_${s}.ppm"
	fi

	if [[ $width -ne $extentwidth ]] || [[ $height -ne $extentheight ]]
	then
		# gravity center sounds more logical, but NorthWest matches TrakEM output
		convert -background black -extent ${extentwidth}x${extentheight} -gravity NorthWest "s_${s}.ppm" "s_${s}_ext.ppm"
	else
		ln "s_${s}.ppm" "s_${s}_ext.ppm"
	fi

	convert -crop ${tilesize}x${tilesize} "s_${s}_ext.ppm" "${s}.jpg"
	# If this is the last tile, rename it directly. If it fails
	# then rename tiles according to position.
	# Also, If this is the last tile, break the loop because it makes
	# no sense to continue shrinking the image in a single tile.
	if mv "${s}.jpg" 0_0_${s}.jpg 2>/dev/null
	then
		break
	else
		for file in ${s}-*.jpg
		do
			regex="s/${s}-\([0-9][0-9]*\).jpg/\1/"
			n=`echo "${file}" | sed "${regex}"`
			r=$((${n}/${collumns}))
			c=$((${n}%${collumns}))
			mv "$file" "${r}_${c}_${s}.jpg"
		done
	fi

	width=$((${width}/2))
	height=$((${height}/2))
	s=$(($s+1))
done

convert -resize ${thumbsize}x${thumbsize} -extent ${thumbsize}x${thumbsize} -background black -gravity center "s_$((${s}-1)).ppm" "small.jpg"

rm *.ppm

echo "Done." >&2
