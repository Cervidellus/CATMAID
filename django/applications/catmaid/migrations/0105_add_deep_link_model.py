import catmaid.fields
import datetime
from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.functions
from django.db import migrations, models
import django.db.models.deletion


forward = """
    CREATE TABLE catmaid_deep_link (
        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id int REFERENCES auth_user(id) ON DELETE SET NULL NOT NULL,
        project_id int REFERENCES project(id) ON DELETE CASCADE NOT NULL,
        creation_time timestamptz NOT NULL DEFAULT now(),
        edition_time timestamptz NOT NULL DEFAULT now(),

        alias text DEFAULT NULL,
        is_public boolean NOT NULL DEFAULT FALSE,
        password text DEFAULT NULL,

        location_x real NULL DEFAULT NULL,
        location_y real NULL DEFAULT NULL,
        location_z real NULL DEFAULT NULL,
        active_treenode_id bigint REFERENCES treenode(id) DEFAULT NULL,
        active_connector_id bigint REFERENCES connector(id) DEFAULT NULL,
        active_skeleton_id bigint REFERENCES class_instance(id) DEFAULT NULL,
        follow_id_history boolean NULL DEFAULT FALSE,
        layered_stacks boolean NULL DEFAULT FALSE,
        layout text DEFAULT NULL,
        tool text DEFAULT NULL,
        show_help boolean NOT NULL DEFAULT FALSE,
        data_view_id int REFERENCES data_view(id) ON DELETE SET NULL DEFAULT NULL,
        message text DEFAULT NULL,

        txid bigint DEFAULT txid_current(),

        UNIQUE(project_id, alias),
        CONSTRAINT location_x_finite CHECK (((location_x <> 'NaN'::real) AND (location_x <> 'Infinity'::real))),
        CONSTRAINT location_y_finite CHECK (((location_y <> 'NaN'::real) AND (location_y <> 'Infinity'::real))),
        CONSTRAINT location_z_finite CHECK (((location_z <> 'NaN'::real) AND (location_z <> 'Infinity'::real)))
    );

    CREATE TABLE catmaid_deep_link_stack (
        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id int REFERENCES auth_user(id) ON DELETE SET NULL NOT NULL,
        project_id int REFERENCES project(id) ON DELETE CASCADE NOT NULL,
        creation_time timestamptz NOT NULL DEFAULT now(),
        edition_time timestamptz NOT NULL DEFAULT now(),
        txid bigint DEFAULT txid_current(),

        deep_link_id int REFERENCES catmaid_deep_link ON DELETE CASCADE NOT NULL,
        stack_id int REFERENCES stack(id) ON DELETE CASCADE NOT NULL,
        zoom_level real DEFAULT 0 NOT NULL
    );

    CREATE TABLE catmaid_deep_link_stack_group (
        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id int REFERENCES auth_user(id) ON DELETE SET NULL NOT NULL,
        project_id int REFERENCES project(id) ON DELETE CASCADE NOT NULL,
        creation_time timestamptz NOT NULL DEFAULT now(),
        edition_time timestamptz NOT NULL DEFAULT now(),
        txid bigint DEFAULT txid_current(),

        deep_link_id int REFERENCES catmaid_deep_link ON DELETE CASCADE NOT NULL,
        stack_group_id int REFERENCES stack_group(id) ON DELETE CASCADE NOT NULL,
        zoom_levels real[] NOT NULL
    );

    -- Trigger
    CREATE TRIGGER on_edit_deep_link BEFORE UPDATE ON catmaid_deep_link FOR EACH ROW EXECUTE PROCEDURE on_edit();
    CREATE TRIGGER on_edit_deep_link_stack BEFORE UPDATE ON catmaid_deep_link FOR EACH ROW EXECUTE PROCEDURE on_edit();
    CREATE TRIGGER on_edit_deep_link_stack_group BEFORE UPDATE ON catmaid_deep_link_stack_group FOR EACH ROW EXECUTE PROCEDURE on_edit();

    -- Setup history
    SELECT create_history_table('catmaid_deep_link'::regclass, 'edition_time', 'txid');
    SELECT create_history_table('catmaid_deep_link_stack'::regclass, 'edition_time', 'txid');
    SELECT create_history_table('catmaid_deep_link_stack_group'::regclass, 'edition_time', 'txid');

    -- Create indices
    CREATE INDEX deep_links_project_user_idx ON catmaid_deep_link (project_id, user_id);
    CREATE INDEX deep_links_alias_idx ON catmaid_deep_link (alias);
    CREATE INDEX deep_links_stack_link_idx ON catmaid_deep_link_stack (deep_link_id);
    CREATE INDEX deep_links_stack_group_link_idx ON catmaid_deep_link_stack_group (deep_link_id);
"""

backward = """
    SELECT drop_history_table('catmaid_deep_link_stack_group'::regclass);
    SELECT drop_history_table('catmaid_deep_link_stack'::regclass);
    SELECT drop_history_table('catmaid_deep_link'::regclass);

    DROP TABLE catmaid_deep_link_stack_group;
    DROP TABLE catmaid_deep_link_stack;
    DROP TABLE catmaid_deep_link;
"""


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('catmaid', '0104_add_home_view_user_profile_field'),
    ]

    operations = [
        migrations.RunSQL(forward, backward, [
			migrations.CreateModel(
				name='DeepLink',
				fields=[
					('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
					('creation_time', catmaid.fields.DbDefaultDateTimeField(default=django.contrib.postgres.functions.TransactionNow)),
					('edition_time', catmaid.fields.DbDefaultDateTimeField(default=django.contrib.postgres.functions.TransactionNow)),
					('alias', models.TextField(blank=True, null=True)),
					('is_public', models.BooleanField(default=False)),
					('password', models.CharField(max_length=255)),
					('location_x', models.FloatField(blank=True, null=True)),
					('location_y', models.FloatField(blank=True, null=True)),
					('location_z', models.FloatField(blank=True, null=True)),
					('follow_id_history', models.BooleanField(default=False)),
					('layered_stacks', models.BooleanField(default=False)),
					('layout', models.TextField(blank=True, null=True)),
					('tool', models.TextField(blank=True, null=True)),
					('show_help', models.BooleanField(default=False)),
					('message', models.TextField(blank=True, null=True)),
					('active_connector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catmaid.Connector')),
					('active_skeleton', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catmaid.ClassInstance')),
					('active_treenode', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catmaid.Treenode')),
					('data_view', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='catmaid.DataView')),
					('project', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='catmaid.Project')),
					('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
				],
				options={
					'db_table': 'catmaid_deep_link',
				},
			),
			migrations.CreateModel(
				name='DeepLinkStackGroup',
				fields=[
					('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
					('creation_time', catmaid.fields.DbDefaultDateTimeField(default=django.contrib.postgres.functions.TransactionNow)),
					('edition_time', catmaid.fields.DbDefaultDateTimeField(default=django.contrib.postgres.functions.TransactionNow)),
					('zoom_levels', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
					('deep_link', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='catmaid.DeepLink')),
					('project', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='catmaid.Project')),
					('stack_group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='stack_groups', to='catmaid.StackGroup')),
					('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
				],
				options={
					'db_table': 'catmaid_deep_link_stack_group',
				},
			),
			migrations.CreateModel(
				name='DeepLinkStack',
				fields=[
					('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
					('creation_time', catmaid.fields.DbDefaultDateTimeField(default=django.contrib.postgres.functions.TransactionNow)),
					('edition_time', catmaid.fields.DbDefaultDateTimeField(default=django.contrib.postgres.functions.TransactionNow)),
					('zoom_level', models.FloatField(default=0)),
					('deep_link', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='catmaid.DeepLink')),
					('project', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='catmaid.Project')),
					('stack', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='stack', to='catmaid.Stack')),
					('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
				],
				options={
					'db_table': 'catmaid_deep_link_stack',
				},
			),
        ]),
    ]
