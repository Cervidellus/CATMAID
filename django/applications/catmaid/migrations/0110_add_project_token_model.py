import catmaid.fields
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.functions
from django.db import migrations, models
import django.db.models.deletion
import uuid


forward = """
    CREATE TABLE catmaid_project_token (
        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id int REFERENCES auth_user(id) ON DELETE SET NULL NOT NULL,
        project_id int REFERENCES project(id) ON DELETE CASCADE NOT NULL,
        creation_time timestamptz NOT NULL DEFAULT now(),
        edition_time timestamptz NOT NULL DEFAULT now(),

        name text NOT NULL,
        token uuid NOT NULL,
        needs_approval boolean NOT NULL DEFAULT FALSE,
        enabled boolean NOT NULL DEFAULT True,
        default_permissions text[] NOT NULL DEFAULT '{}'::text[],

        txid bigint DEFAULT txid_current(),

        UNIQUE(token)
    );

    CREATE TABLE catmaid_user_project_token (
        id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        user_id int REFERENCES auth_user(id) ON DELETE CASCADE NOT NULL,
        creation_time timestamptz NOT NULL DEFAULT now(),
        edition_time timestamptz NOT NULL DEFAULT now(),
        txid bigint DEFAULT txid_current(),

        enabled boolean NOT NULL DEFAULT True,
        approved boolean NOT NULL DEFAULT False,

        project_token_id int REFERENCES catmaid_project_token ON DELETE CASCADE NOT NULL
    );

    -- Trigger
    CREATE TRIGGER on_edit_project_token BEFORE UPDATE ON catmaid_project_token
        FOR EACH ROW EXECUTE PROCEDURE on_edit();
    CREATE TRIGGER on_edit_user_project_token BEFORE UPDATE ON catmaid_user_project_token
        FOR EACH ROW EXECUTE PROCEDURE on_edit();

    -- Setup history
    SELECT create_history_table('catmaid_project_token'::regclass, 'edition_time', 'txid');
    SELECT create_history_table('catmaid_user_project_token'::regclass, 'edition_time', 'txid');

    -- Create indices
    CREATE INDEX project_token_project_user_idx ON catmaid_project_token (project_id, user_id);
    CREATE INDEX project_token_token_idx ON catmaid_project_token (token);
    CREATE INDEX user_project_token_user_idx ON catmaid_user_project_token (user_id);
    CREATE INDEX user_project_token_project_approved_idx ON catmaid_user_project_token (project_token_id, approved);
"""

backward = """
    SELECT drop_history_table('catmaid_user_project_token'::regclass);
    SELECT drop_history_table('catmaid_project_token'::regclass);

    DROP TABLE catmaid_user_project_token;
    DROP TABLE catmaid_project_token;
"""


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('catmaid', '0109_improve_deep_link_cascading_deletes'),
    ]

    operations = [
        migrations.RunSQL(forward, backward, [
            migrations.CreateModel(
                name='ProjectToken',
                fields=[
                    ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                    ('creation_time', catmaid.fields.DbDefaultDateTimeField(default=django.contrib.postgres.functions.TransactionNow)),
                    ('edition_time', catmaid.fields.DbDefaultDateTimeField(default=django.contrib.postgres.functions.TransactionNow)),
                    ('name', models.TextField()),
                    ('token', models.UUIDField(default=uuid.uuid4, editable=False)),
                    ('needs_approval', models.BooleanField(default=False)),
                    ('enabled', models.BooleanField(default=True)),
                    ('default_permissions', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None)),
                    ('project', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='catmaid.Project')),
                    ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ],
                options={
                    'abstract': False,
                    'db_table': 'catmaid_project_token',
                },
            ),
            migrations.CreateModel(
                name='UserProjectToken',
                fields=[
                    ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                    ('creation_time', catmaid.fields.DbDefaultDateTimeField(default=django.contrib.postgres.functions.TransactionNow)),
                    ('edition_time', catmaid.fields.DbDefaultDateTimeField(default=django.contrib.postgres.functions.TransactionNow)),
                    ('enabled', models.BooleanField(default=True)),
                    ('approved', models.BooleanField(default=False)),
                    ('project_token', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='catmaid.ProjectToken')),
                    ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ],
                options={
                    'db_table': 'catmaid_user_project_token',
                }
            ),
        ]),
    ]
